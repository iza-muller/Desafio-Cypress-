{
	"info": {
		"_postman_id": "9cf95daf-47af-42d6-802c-db22947f9f72",
		"name": "Testes API PrimeControl.",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "40045288"
	},
	"item": [
		{
			"name": "CT001 -Teste de resposta bem-sucedida",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"// Teste para garantir que o servidor respondeu com sucesso (status 200)\r",
							"pm.test(\"A resposta foi bem-sucedida (Status 200)\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"// Teste para garantir que a resposta seja uma lista de clientes\r",
							"pm.test(\"A resposta contém uma lista de clientes\", function () {\r",
							"    const jsonData = pm.response.json();\r",
							"    pm.expect(jsonData).to.be.an('array'); // a resposta deve ser um array\r",
							"    pm.expect(jsonData.length).to.be.greaterThan(0); // a lista deve ter pelo menos um cliente\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://api-challenge.primecontrol.com.br/listClients",
					"protocol": "https",
					"host": [
						"api-challenge",
						"primecontrol",
						"com",
						"br"
					],
					"path": [
						"listClients"
					]
				}
			},
			"response": []
		},
		{
			"name": "CT002 - Cenários para testes de API",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Tetes para garantir que todos os campos necessários estão presentes e com o formato correto\r",
							"pm.test(\"Todos os campos dos clientes estão presentes e no formato correto\", function () {\r",
							"    const jsonData = pm.response.json();\r",
							"    \r",
							"    // Para cada cliente na lista\r",
							"    jsonData.forEach((cliente, index) => {\r",
							"        // Verifica se o cliente tem o ID (não pode faltar um identificador único!)\r",
							"        pm.expect(cliente).to.have.property('id', `Cliente na posição ${index + 1} precisa ter um ID válido`);\r",
							"        \r",
							"        // Verifica se o cliente tem um nome (nome é obrigatório!)\r",
							"        pm.expect(cliente).to.have.property('nome', `Cliente na posição ${index + 1} precisa ter um nome`);\r",
							"\r",
							"        // Verifica se o cliente tem um e-mail (e-mail no formato correto!)\r",
							"        pm.expect(cliente).to.have.property('email', `Cliente na posição ${index + 1} precisa ter um e-mail válido`);\r",
							"        \r",
							"        // Validando o formato do e-mail usando regex (formato geral de e-mail)\r",
							"        pm.expect(cliente.email).to.match(/^([\\w-]+(?:\\.[\\w-]+)*@([\\w-]+\\.)+[a-zA-Z]{2,7})$/, `E-mail do cliente na posição ${index + 1} está com formato inválido`);\r",
							"        \r",
							"        // Verifica se o cliente tem um telefone (fone no formato correto)\r",
							"        pm.expect(cliente).to.have.property('fone', `Cliente na posição ${index + 1} precisa ter um telefone válido`);\r",
							"        \r",
							"        // Verificando se o telefone é um número (e estamos validando como um inteiro)\r",
							"        pm.expect(cliente.fone).to.be.a('number', `Telefone do cliente na posição ${index + 1} deve ser um número inteiro`);\r",
							"        \r",
							"        // Verifica se o cliente tem uma foto de perfil (URL válida)\r",
							"        pm.expect(cliente).to.have.property('fotoPerfil', `Cliente na posição ${index + 1} precisa ter uma URL de foto de perfil válida`);\r",
							"        \r",
							"        // Validando o formato da URL da foto de perfil\r",
							"        pm.expect(cliente.fotoPerfil).to.match(/^https?:\\/\\/(www\\.)?[a-zA-Z0-9-]+\\.[a-zA-Z]{2,6}(\\/[^\\s]*)?$/, `URL da foto de perfil do cliente na posição ${index + 1} está com formato inválido`);\r",
							"    });\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://api-challenge.primecontrol.com.br/listClients",
					"protocol": "https",
					"host": [
						"api-challenge",
						"primecontrol",
						"com",
						"br"
					],
					"path": [
						"listClients"
					]
				}
			},
			"response": []
		},
		{
			"name": "CT003 - Teste endpoint retorno404",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Teste onde a API retorna 404 quando o endpoint não existe\r",
							"pm.test(\"Endpoint inexistente deve retornar código 404\", function () {\r",
							"    // Verifica se o status da resposta é 404\r",
							"    pm.response.to.have.status(404);\r",
							"    \r",
							"    // outro teste opcional: verificar se o corpo da resposta contém uma mensagem de erro\r",
							"    pm.test(\"A resposta deve conter uma mensagem de erro adequada\", function () {\r",
							"        const jsonData = pm.response.json();\r",
							"        // Supondo que a API retorne uma mensagem de erro no corpo (ajuste conforme necessário)\r",
							"        pm.expect(jsonData).to.have.property('message', 'Endpoint não encontrado');\r",
							"    });\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://api-challenge.primecontrol.com.br/endpointInexistente",
					"protocol": "https",
					"host": [
						"api-challenge",
						"primecontrol",
						"com",
						"br"
					],
					"path": [
						"endpointInexistente"
					]
				}
			},
			"response": []
		}
	]
}